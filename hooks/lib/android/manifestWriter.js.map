{"version":3,"sources":["lib/android/manifestWriter.js"],"names":[],"mappings":"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","file":"lib/android/manifestWriter.js","sourcesContent":["/**\nClass injects plugin preferences into AndroidManifest.xml file.\n*/\n(function() {\n\n  var path = require('path'),\n    xmlHelper = require('../xmlHelper.js');\n\n  module.exports = {\n    writePreferences: writePreferences\n  };\n\n  // region Public API\n\n  /**\n   * Inject preferences into AndroidManifest.xml file.\n   *\n   * @param {Object} cordovaContext - cordova context object\n   * @param {Object} pluginPreferences - plugin preferences as JSON object; already parsed\n   */\n  function writePreferences(cordovaContext, pluginPreferences) {\n    var pathToManifest = path.join(cordovaContext.opts.projectRoot, 'platforms', 'android', 'AndroidManifest.xml'),\n      manifestSource = xmlHelper.readXmlAsJson(pathToManifest),\n      cleanManifest,\n      updatedManifest;\n\n    // remove old intent-filters\n    cleanManifest = removeOldOptions(manifestSource);\n\n    // inject intent-filters based on plugin preferences\n    updatedManifest = injectOptions(cleanManifest, pluginPreferences);\n\n    // save new version of the AndroidManifest\n    xmlHelper.writeJsonAsXml(updatedManifest, pathToManifest);\n  }\n\n  // endregion\n\n  // region Manifest cleanup methods\n\n  /**\n   * Remove old intent-filters from the manifest file.\n   *\n   * @param {Object} manifestData - manifest content as JSON object\n   * @return {Object} manifest data without old intent-filters\n   */\n  function removeOldOptions(manifestData) {\n    var cleanManifest = manifestData,\n      activities = manifestData['manifest']['application'][0]['activity'];\n\n    activities.forEach(removeIntentFiltersFromActivity);\n    cleanManifest['manifest']['application'][0]['activity'] = activities;\n\n    return cleanManifest;\n  }\n\n  /**\n   * Remove old intent filters from the given activity.\n   *\n   * @param {Object} activity - activity, from which we need to remove intent-filters.\n   *                            Changes applied to the passed object.\n   */\n  function removeIntentFiltersFromActivity(activity) {\n    var oldIntentFilters = activity['intent-filter'],\n      newIntentFilters = [];\n    if (oldIntentFilters == null || oldIntentFilters.length == 0) {\n      return;\n    }\n\n    oldIntentFilters.forEach(function(intentFilter) {\n      if (!isIntentFilterForUniversalLinks(intentFilter)) {\n        newIntentFilters.push(intentFilter);\n      }\n    });\n\n    activity['intent-filter'] = newIntentFilters;\n  }\n\n  /**\n   * Check if given intent-filter is for Universal Links.\n   *\n   * @param {Object} intentFilter - intent-filter to check\n   * @return {Boolean} true - if intent-filter for Universal Links; otherwise - false;\n   */\n  function isIntentFilterForUniversalLinks(intentFilter) {\n    var actions = intentFilter['action'],\n      categories = intentFilter['category'],\n      data = intentFilter['data'];\n\n    return isActionForUniversalLinks(actions) && isCategoriesForUniversalLinks(categories) && isDataTagForUniversalLinks(data);\n  }\n\n  /**\n   * Check if actions from the intent-filter corresponds to actions for Universal Links.\n   *\n   * @param {Array} actions - list of actions in the intent-filter\n   * @return {Boolean} true - if action for Universal Links; otherwise - false\n   */\n  function isActionForUniversalLinks(actions) {\n    // there can be only 1 action\n    if (actions == null || actions.length != 1) {\n      return false;\n    }\n\n    var action = actions[0]['$']['android:name'];\n\n    return action === 'android.intent.action.VIEW';\n  }\n\n  /**\n   * Check if categories in the intent-filter corresponds to categories for Universal Links.\n   *\n   * @param {Array} categories - list of categories in the intent-filter\n   * @return {Boolean} true - if action for Universal Links; otherwise - false\n   */\n  function isCategoriesForUniversalLinks(categories) {\n    // there can be only 2 categories\n    if (categories == null || categories.length != 2) {\n      return false;\n    }\n\n    var isBrowsable = false,\n      isDefault = false;\n\n    // check intent categories\n    categories.forEach(function(category) {\n      var categoryName = category['$']['android:name'];\n      if (!isBrowsable) {\n        isBrowsable = categoryName === 'android.intent.category.BROWSABLE';\n      }\n\n      if (!isDefault) {\n        isDefault = categoryName === 'android.intent.category.DEFAULT';\n      }\n    });\n\n    return isDefault && isBrowsable;\n  }\n\n  /**\n   * Check if data tag from intent-filter corresponds to data for Universal Links.\n   *\n   * @param {Array} data - list of data tags in the intent-filter\n   * @return {Boolean} true - if data tag for Universal Links; otherwise - false\n   */\n  function isDataTagForUniversalLinks(data) {\n    // can have only 1 data tag in the intent-filter\n    if (data == null || data.length != 1) {\n      return false;\n    }\n\n    var dataHost = data[0]['$']['android:host'],\n      dataScheme = data[0]['$']['android:scheme'],\n      hostIsSet = dataHost != null && dataHost.length > 0,\n      schemeIsSet = dataScheme != null && dataScheme.length > 0;\n\n    return hostIsSet && schemeIsSet;\n  }\n\n  // endregion\n\n  // region Methods to inject preferences into AndroidManifest.xml file\n\n  /**\n   * Inject options into manifest file.\n   *\n   * @param {Object} manifestData - manifest content where preferences should be injected\n   * @param {Object} pluginPreferences - plugin preferences from config.xml; already parsed\n   * @return {Object} updated manifest data with corresponding intent-filters\n   */\n  function injectOptions(manifestData, pluginPreferences) {\n    var changedManifest = manifestData,\n      targetSdk = changedManifest['manifest']['uses-sdk'][0]['$']['android:targetSdkVersion'],\n      activitiesList = changedManifest['manifest']['application'][0]['activity'],\n      launchActivityIndex = getMainLaunchActivityIndex(activitiesList),\n      ulIntentFilters = [],\n      launchActivity;\n\n    if (launchActivityIndex < 0) {\n      console.warn('Could not find launch activity in the AndroidManifest file. Can\\'t inject Universal Links preferences.');\n      return;\n    }\n\n    // get launch activity\n    launchActivity = activitiesList[launchActivityIndex];\n\n    // generate intent-filters\n    pluginPreferences.hosts.forEach(function(host) {\n      ulIntentFilters.push(createIntentFilter(host.name, host.scheme, pluginPreferences.androidPrefix, parseInt(targetSdk) >= 23));\n    });\n\n    // add Universal Links intent-filters to the launch activity\n    launchActivity['intent-filter'] = launchActivity['intent-filter'].concat(ulIntentFilters);\n\n    return changedManifest;\n  }\n\n  /**\n   * Find index of the applications launcher activity.\n   *\n   * @param {Array} activities - list of all activities in the app\n   * @return {Integer} index of the launch activity; -1 - if none was found\n   */\n  function getMainLaunchActivityIndex(activities) {\n    var launchActivityIndex = -1;\n    activities.some(function(activity, index) {\n      if (isLaunchActivity(activity)) {\n        launchActivityIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    return launchActivityIndex;\n  }\n\n  /**\n   * Check if the given actvity is a launch activity.\n   *\n   * @param {Object} activity - activity to check\n   * @return {Boolean} true - if this is a launch activity; otherwise - false\n   */\n  function isLaunchActivity(activity) {\n    var intentFilters = activity['intent-filter'],\n      isLauncher = false;\n\n    if (intentFilters == null || intentFilters.length == 0) {\n      return false;\n    }\n\n    isLauncher = intentFilters.some(function(intentFilter) {\n      var action = intentFilter['action'],\n        category = intentFilter['category'];\n\n      if (action == null || action.length != 1 || category == null || category.length != 1) {\n        return false;\n      }\n\n      var isMainAction = (action[0]['$']['android:name'] === 'android.intent.action.MAIN'),\n        isLauncherCategory = (category[0]['$']['android:name'] === 'android.intent.category.LAUNCHER');\n\n      return isMainAction && isLauncherCategory;\n    });\n\n    return isLauncher;\n  }\n\n  /**\n   * Create JSON object that represent intent-filter for universal link.\n   *\n   * @param {String} host - host name\n   * @param {String} scheme - host scheme\n   * @param {String} pathName - host path\n   * @return {Object} intent-filter as a JSON object\n   */\n  function createIntentFilter(host, scheme, pathPrefix, androidM) {\n    var intentFilter = {\n      '$': {\n        'android:autoVerify': 'true'\n      },\n      'action': [ {\n        '$': {\n          'android:name': 'android.intent.action.VIEW'\n        }\n      } ],\n      'category': [ {\n        '$': {\n          'android:name': 'android.intent.category.DEFAULT'\n        }\n      }, {\n        '$': {\n          'android:name': 'android.intent.category.BROWSABLE'\n        }\n      } ],\n      'data': [ {\n        '$': {\n          'android:host': host,\n          'android:scheme': scheme,\n          'android:pathPrefix': pathPrefix\n        }\n      } ]\n    };\n\n    if (!pathPrefix) {\n      delete intentFilter['data'][0]['$']['android:pathPrefix'];\n    }\n\n    if (!androidM) {\n      delete intentFilter['$']['android:autoVerify'];\n    }\n\n    return intentFilter;\n  }\n\n  // endregion\n\n})();\n"],"sourceRoot":"/source/"}