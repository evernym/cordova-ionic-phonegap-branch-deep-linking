{"version":3,"sources":["lib/ios/projectEntitlements.js"],"names":[],"mappings":";;AAAA;;;;;;;AAOA,CAAC,YAAW;;AAEV,MAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,MACE,KAAK,QAAQ,IAAR,CADP;AAAA,MAEE,QAAQ,QAAQ,OAAR,CAFV;AAAA,MAGE,SAAS,QAAQ,QAAR,CAHX;AAAA,MAIE,kBAAkB,QAAQ,uBAAR,CAJpB;AAAA,MAKE,qBAAqB,wCALvB;AAAA,MAME,OANF;AAAA,MAOE,WAPF;AAAA,MAQE,WARF;AAAA,MASE,oBATF;;AAWA,SAAO,OAAP,GAAiB;AACf,2CAAuC;AADxB,GAAjB;;AAIA;;AAEA;;;;;;AAMA,WAAS,oBAAT,CAA8B,cAA9B,EAA8C,iBAA9C,EAAiE;AAC/D,cAAU,cAAV;;AAEA,QAAI,sBAAsB,4BAA1B;AAAA,QACE,kBAAkB,kBAAkB,mBAAlB,EAAuC,iBAAvC,CADpB;;AAGA,kCAA8B,eAA9B;AACD;;AAED;;AAEA;;AAEA;;;;;AAKA,WAAS,6BAAT,CAAuC,OAAvC,EAAgD;AAC9C,QAAI,eAAe,MAAM,KAAN,CAAY,OAAZ,CAAnB;AAAA,QACE,WAAW,wBADb;;AAGA;AACA,WAAO,IAAP,CAAY,KAAK,OAAL,CAAa,QAAb,CAAZ;;AAEA;AACA,OAAG,aAAH,CAAiB,QAAjB,EAA2B,YAA3B,EAAyC,MAAzC;AACD;;AAED;;;;;AAKA,WAAS,0BAAT,GAAsC;AACpC,QAAI,aAAa,wBAAjB;AAAA,QACE,OADF;;AAGA,QAAI;AACF,gBAAU,GAAG,YAAH,CAAgB,UAAhB,EAA4B,MAA5B,CAAV;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,aAAO,yBAAP;AACD;;AAED,WAAO,MAAM,KAAN,CAAY,OAAZ,CAAP;AACD;;AAED;;;;;AAKA,WAAS,uBAAT,GAAmC;AACjC,WAAO,EAAP;AACD;;AAED;;;;;;;AAOA,WAAS,iBAAT,CAA2B,mBAA3B,EAAgD,iBAAhD,EAAmE;AACjE,QAAI,kBAAkB,mBAAtB;AAAA,QACE,UAAU,iCAAiC,iBAAjC,CADZ;;AAGA,oBAAgB,kBAAhB,IAAsC,OAAtC;;AAEA,WAAO,eAAP;AACD;;AAED;;;;;;AAMA,WAAS,gCAAT,CAA0C,iBAA1C,EAA6D;AAC3D,QAAI,cAAc,EAAlB;AAAA,QACE,IADF;;AAGA;AACA,sBAAkB,KAAlB,CAAwB,OAAxB,CAAgC,UAAS,IAAT,EAAe;AAC7C,aAAO,wBAAwB,IAAxB,CAAP;AACA,kBAAY,IAAZ,CAAiB,IAAjB;AACD,KAHD;;AAKA,WAAO,WAAP;AACD;;AAED;;;;;;AAMA,WAAS,uBAAT,CAAiC,IAAjC,EAAuC;AACrC,WAAO,cAAc,KAAK,IAA1B;AACD;;AAED;;AAEA;;AAEA;;;;;AAKA,WAAS,sBAAT,GAAkC;AAChC,QAAI,yBAAyB,SAA7B,EAAwC;AACtC,6BAAuB,KAAK,IAAL,CAAU,gBAAV,EAA4B,WAA5B,EAAyC,KAAzC,EAAgD,gBAAhD,EAAkE,WAAlE,EAA+E,mBAAmB,eAAlG,CAAvB;AACD;;AAED,WAAO,oBAAP;AACD;;AAED;;;;;AAKA,WAAS,cAAT,GAA0B;AACxB,WAAO,QAAQ,IAAR,CAAa,WAApB;AACD;;AAED;;;;;AAKA,WAAS,cAAT,GAA0B;AACxB,QAAI,gBAAgB,SAApB,EAA+B;AAC7B,UAAI,kBAAkB,IAAI,eAAJ,CAAoB,OAApB,CAAtB;AACA,oBAAc,gBAAgB,cAAhB,EAAd;AACD;;AAED,WAAO,WAAP;AACD;;AAED;AAED,CAxKD","file":"lib/ios/projectEntitlements.js","sourcesContent":["/*\nScript creates entitlements file with the list of hosts, specified in config.xml.\nFile name is: ProjectName.entitlements\nLocation: ProjectName/\n\nScript only generates content. File it self is included in the xcode project in another hook: xcodePreferences.js.\n*/\n(function() {\n\n  var path = require('path'),\n    fs = require('fs'),\n    plist = require('plist'),\n    mkpath = require('mkpath'),\n    ConfigXmlHelper = require('../configXmlHelper.js'),\n    ASSOCIATED_DOMAINS = 'com.apple.developer.associated-domains',\n    context,\n    projectRoot,\n    projectName,\n    entitlementsFilePath;\n\n  module.exports = {\n    generateAssociatedDomainsEntitlements: generateEntitlements\n  };\n\n  // region Public API\n\n  /**\n   * Generate entitlements file content.\n   *\n   * @param {Object} cordovaContext - cordova context object\n   * @param {Object} pluginPreferences - plugin preferences from config.xml; already parsed\n   */\n  function generateEntitlements(cordovaContext, pluginPreferences) {\n    context = cordovaContext;\n\n    var currentEntitlements = getEntitlementsFileContent(),\n      newEntitlements = injectPreferences(currentEntitlements, pluginPreferences);\n\n    saveContentToEntitlementsFile(newEntitlements);\n  }\n\n  // endregion\n\n  // region Work with entitlements file\n\n  /**\n   * Save data to entitlements file.\n   *\n   * @param {Object} content - data to save; JSON object that will be transformed into xml\n   */\n  function saveContentToEntitlementsFile(content) {\n    var plistContent = plist.build(content),\n      filePath = pathToEntitlementsFile();\n\n    // ensure that file exists\n    mkpath.sync(path.dirname(filePath));\n\n    // save it's content\n    fs.writeFileSync(filePath, plistContent, 'utf8');\n  }\n\n  /**\n   * Read data from existing entitlements file. If none exist - default value is returned\n   *\n   * @return {String} entitlements file content\n   */\n  function getEntitlementsFileContent() {\n    var pathToFile = pathToEntitlementsFile(),\n      content;\n\n    try {\n      content = fs.readFileSync(pathToFile, 'utf8');\n    } catch (err) {\n      return defaultEntitlementsFile();\n    }\n\n    return plist.parse(content);\n  }\n\n  /**\n   * Get content for an empty entitlements file.\n   *\n   * @return {String} default entitlements file content\n   */\n  function defaultEntitlementsFile() {\n    return {};\n  }\n\n  /**\n   * Inject list of hosts into entitlements file.\n   *\n   * @param {Object} currentEntitlements - entitlements where to inject preferences\n   * @param {Object} pluginPreferences - list of hosts from config.xml\n   * @return {Object} new entitlements content\n   */\n  function injectPreferences(currentEntitlements, pluginPreferences) {\n    var newEntitlements = currentEntitlements,\n      content = generateAssociatedDomainsContent(pluginPreferences);\n\n    newEntitlements[ASSOCIATED_DOMAINS] = content;\n\n    return newEntitlements;\n  }\n\n  /**\n   * Generate content for associated-domains dictionary in the entitlements file.\n   *\n   * @param {Object} pluginPreferences - list of hosts from conig.xml\n   * @return {Object} associated-domains dictionary content\n   */\n  function generateAssociatedDomainsContent(pluginPreferences) {\n    var domainsList = [],\n      link;\n\n    // generate list of host links\n    pluginPreferences.hosts.forEach(function(host) {\n      link = domainsListEntryForHost(host);\n      domainsList.push(link);\n    });\n\n    return domainsList;\n  }\n\n  /**\n   * Generate domain record for the given host.\n   *\n   * @param {Object} host - host entry\n   * @return {String} record\n   */\n  function domainsListEntryForHost(host) {\n    return 'applinks:' + host.name;\n  }\n\n  // endregion\n\n  // region Path helper methods\n\n  /**\n   * Path to entitlements file.\n   *\n   * @return {String} absolute path to entitlements file\n   */\n  function pathToEntitlementsFile() {\n    if (entitlementsFilePath === undefined) {\n      entitlementsFilePath = path.join(getProjectRoot(), 'platforms', 'ios', getProjectName(), 'Resources', getProjectName() + '.entitlements');\n    }\n\n    return entitlementsFilePath;\n  }\n\n  /**\n   * Projects root folder path.\n   *\n   * @return {String} absolute path to the projects root\n   */\n  function getProjectRoot() {\n    return context.opts.projectRoot;\n  }\n\n  /**\n   * Name of the project from config.xml\n   *\n   * @return {String} project name\n   */\n  function getProjectName() {\n    if (projectName === undefined) {\n      var configXmlHelper = new ConfigXmlHelper(context);\n      projectName = configXmlHelper.getProjectName();\n    }\n\n    return projectName;\n  }\n\n  // endregion\n\n})();\n"],"sourceRoot":"/source/"}