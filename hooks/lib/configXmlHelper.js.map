{"version":3,"sources":["lib/configXmlHelper.js"],"names":[],"mappings":";;AAAA;;;AAGA,CAAC,YAAW;AACV,MAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,MACE,YAAY,QAAQ,gBAAR,CADd;AAAA,MAEE,UAAU,SAFZ;AAAA,MAGE,MAAM,KAHR;AAAA,MAIE,mBAAmB,YAJrB;AAAA,MAKE,OALF;AAAA,MAME,WANF;;AAQA,SAAO,OAAP,GAAiB,eAAjB;;AAEA;;AAEA;;;;;AAKA,WAAS,eAAT,CAAyB,cAAzB,EAAyC;AACvC,cAAU,cAAV;AACA,kBAAc,QAAQ,IAAR,CAAa,WAA3B;AACD;;AAED;;;;;AAKA,kBAAgB,SAAhB,CAA0B,IAA1B,GAAiC,YAAW;AAC1C,QAAI,WAAW,sBAAf;;AAEA,WAAO,UAAU,aAAV,CAAwB,QAAxB,CAAP;AACD,GAJD;;AAMA;;;;;;AAMA,kBAAgB,SAAhB,CAA0B,cAA1B,GAA2C,UAAS,QAAT,EAAmB;AAC5D,QAAI,iBAAiB,sBAArB;AAAA,QACE,SAAS,uBAAuB,cAAvB,CADX;AAAA,QAEE,WAFF;;AAIA,YAAQ,QAAR;AACE,WAAK,OAAL;AAAc;AACV,wBAAc,OAAO,mBAAP,EAAd;AACA;AACD;AACH,WAAK,GAAL;AAAU;AACN,wBAAc,OAAO,sBAAP,EAAd;AACA;AACD;AARL;AAUA,QAAI,gBAAgB,SAAhB,IAA6B,YAAY,MAAZ,IAAsB,CAAvD,EAA0D;AACxD,oBAAc,OAAO,WAAP,EAAd;AACD;;AAED,WAAO,WAAP;AACD,GApBD;;AAsBA;;;;;AAKA,kBAAgB,SAAhB,CAA0B,cAA1B,GAA2C,YAAW;AACpD,WAAO,gBAAP;AACD,GAFD;;AAIA;;AAEA;;AAEA;;;;;;AAMA,WAAS,sBAAT,CAAgC,cAAhC,EAAgD;AAC9C,QAAI,YAAJ;;AAEA;AACA;AACA,QAAI;AACF,qBAAe,QAAQ,oBAAR,CAA6B,8CAA7B,CAAf;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV,qBAAe,QAAQ,oBAAR,CAA6B,2CAA7B,CAAf;AACD;;AAED,WAAO,IAAI,YAAJ,CAAiB,cAAjB,CAAP;AACD;;AAED;;;AAGA,WAAS,oBAAT,GAAgC;AAC9B,WAAO,KAAK,IAAL,CAAU,WAAV,EAAuB,gBAAvB,CAAP;AACD;;AAED;;;AAGA,WAAS,cAAT,GAA0B;AACxB,QAAI,iBAAiB,sBAArB;AAAA,QACE,SAAS,uBAAuB,cAAvB,CADX;;AAGA,WAAO,OAAO,IAAP,EAAP;AACD;;AAED;AAED,CAlHD","file":"lib/configXmlHelper.js","sourcesContent":["/*\nHelper class to read data from config.xml file.\n*/\n(function() {\n  var path = require('path'),\n    xmlHelper = require('./xmlHelper.js'),\n    ANDROID = 'android',\n    IOS = 'ios',\n    CONFIG_FILE_NAME = 'config.xml',\n    context,\n    projectRoot;\n\n  module.exports = ConfigXmlHelper;\n\n  // region public API\n\n  /**\n   * Constructor.\n   *\n   * @param {Object} cordovaContext - cordova context object\n   */\n  function ConfigXmlHelper(cordovaContext) {\n    context = cordovaContext;\n    projectRoot = context.opts.projectRoot;\n  }\n\n  /**\n   * Read config.xml data as JSON object.\n   *\n   * @return {Object} JSON object with data from config.xml\n   */\n  ConfigXmlHelper.prototype.read = function() {\n    var filePath = getConfigXmlFilePath();\n\n    return xmlHelper.readXmlAsJson(filePath);\n  }\n\n  /**\n   * Get package name for the application. Depends on the platform.\n   *\n   * @param {String} platform - 'ios' or 'android'; for what platform we need a package name\n   * @return {String} package/bundle name\n   */\n  ConfigXmlHelper.prototype.getPackageName = function(platform) {\n    var configFilePath = getConfigXmlFilePath(),\n      config = getCordovaConfigParser(configFilePath),\n      packageName;\n\n    switch (platform) {\n      case ANDROID: {\n          packageName = config.android_packageName();\n          break;\n        }\n      case IOS: {\n          packageName = config.ios_CFBundleIdentifier();\n          break;\n        }\n    }\n    if (packageName === undefined || packageName.length == 0) {\n      packageName = config.packageName();\n    }\n\n    return packageName;\n  }\n\n  /**\n   * Get name of the current project.\n   *\n   * @return {String} name of the project\n   */\n  ConfigXmlHelper.prototype.getProjectName = function() {\n    return getProjectName();\n  }\n\n  // endregion\n\n  // region Private API\n\n  /**\n   * Get config parser from cordova library.\n   *\n   * @param {String} configFilePath absolute path to the config.xml file\n   * @return {Object}\n   */\n  function getCordovaConfigParser(configFilePath) {\n    var ConfigParser;\n\n    // If we are running Cordova 5.4 or abova - use parser from cordova-common.\n    // Otherwise - from cordova-lib.\n    try {\n      ConfigParser = context.requireCordovaModule('cordova-common/src/ConfigParser/ConfigParser');\n    } catch (e) {\n      ConfigParser = context.requireCordovaModule('cordova-lib/src/configparser/ConfigParser')\n    }\n\n    return new ConfigParser(configFilePath);\n  }\n\n  /**\n   * Get absolute path to the config.xml.\n   */\n  function getConfigXmlFilePath() {\n    return path.join(projectRoot, CONFIG_FILE_NAME);\n  }\n\n  /**\n   * Get project name from config.xml\n   */\n  function getProjectName() {\n    var configFilePath = getConfigXmlFilePath(),\n      config = getCordovaConfigParser(configFilePath);\n\n    return config.name();\n  }\n\n  // endregion\n\n})();\n"],"sourceRoot":"/source/"}