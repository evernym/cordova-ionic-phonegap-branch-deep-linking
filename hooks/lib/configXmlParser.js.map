{"version":3,"sources":["lib/configXmlParser.js"],"names":[],"mappings":";;AAAA;;;AAGA,CAAC,YAAW;;AAEV,MAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,MACE,KAAK,QAAQ,IAAR,CADP;AAAA,MAEE,SAAS,QAAQ,QAAR,CAFX;AAAA,MAGE,kBAAkB,QAAQ,sBAAR,CAHpB;AAAA,MAIE,iBAAiB,MAJnB;;AAMA,SAAO,OAAP,GAAiB;AACf,qBAAiB;AADF,GAAjB;;AAIA;;AAEA;;;;;;AAMA,WAAS,eAAT,CAAyB,cAAzB,EAAyC;AACvC;AACA,QAAI,YAAY,IAAI,eAAJ,CAAoB,cAApB,EAAoC,IAApC,EAAhB;AACA,QAAI,aAAa,IAAjB,EAAuB;AACrB,cAAQ,IAAR,CAAa,yFAAb;AACA,aAAO,IAAP;AACD;;AAED;AACA,QAAI,mBAAmB,UAAU,MAAV,CAAiB,eAAjB,CAAvB;AACA,QAAI,oBAAoB,IAApB,IAA4B,iBAAiB,MAAjB,IAA2B,CAA3D,EAA8D;AAC5D,cAAQ,IAAR,CAAa,gGAAb;AACA,aAAO,IAAP;AACD;;AAED,QAAI,iBAAiB,iBAAiB,CAAjB,CAArB;;AAEA;AACA,QAAI,QAAQ,mBAAmB,cAAnB,CAAZ;;AAEA;AACA,QAAI,YAAY,oBAAoB,cAApB,CAAhB;;AAEA;AACA,QAAI,gBAAgB,2BAA2B,cAA3B,CAApB;;AAEA,WAAO;AACL,eAAS,KADJ;AAEL,mBAAa,SAFR;AAGL,uBAAiB;AAHZ,KAAP;AAKD;;AAED;;AAEA;;AAEA,WAAS,mBAAT,CAA6B,cAA7B,EAA6C;AAC3C,QAAI,eAAe,cAAf,CAA8B,aAA9B,CAAJ,EAAkD;AAChD,aAAO,eAAe,aAAf,EAA8B,CAA9B,EAAiC,GAAjC,EAAsC,OAAtC,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,WAAS,0BAAT,CAAoC,cAApC,EAAoD;AAClD,QAAI,eAAe,cAAf,CAA8B,gBAA9B,CAAJ,EAAqD;AACnD,aAAO,eAAe,gBAAf,EAAiC,CAAjC,EAAoC,GAApC,EAAyC,OAAzC,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,WAAS,kBAAT,CAA4B,cAA5B,EAA4C;AAC1C,QAAI,YAAY,EAAhB;;AAEA;AACA,QAAI,cAAc,eAAe,MAAf,CAAlB;AACA,QAAI,eAAe,IAAf,IAAuB,YAAY,MAAZ,IAAsB,CAAjD,EAAoD;AAClD,aAAO,EAAP;AACD;;AAED,gBAAY,OAAZ,CAAoB,UAAS,UAAT,EAAqB;AACvC,UAAI,OAAO,mBAAmB,UAAnB,CAAX;AACA,UAAI,IAAJ,EAAU;AACR,kBAAU,IAAV,CAAe,IAAf;AACD;AACF,KALD;;AAOA,WAAO,SAAP;AACD;;AAED;;;;;;AAMA,WAAS,kBAAT,CAA4B,UAA5B,EAAwC;AACtC,QAAI,OAAO;AACP,cAAQ,cADD;AAEP,YAAM;AAFC,KAAX;AAAA,QAIE,iBAAiB,WAAW,GAAX,CAJnB;;AAMA,QAAI,kBAAkB,IAAlB,IAA0B,eAAe,MAAf,IAAyB,CAAvD,EAA0D;AACxD,aAAO,IAAP;AACD;;AAED;AACA,SAAK,IAAL,GAAY,eAAe,IAA3B;;AAEA;AACA,QAAI,eAAe,QAAf,KAA4B,IAAhC,EAAsC;AACpC,WAAK,MAAL,GAAc,eAAe,MAA7B;AACD;;AAED,WAAO,IAAP;AACD;;AAED;AAED,CAhID","file":"lib/configXmlParser.js","sourcesContent":["/*\nParser for config.xml file. Read plugin-specific preferences (from <branch-config> tag) as JSON object.\n*/\n(function() {\n\n  var path = require('path'),\n    fs = require('fs'),\n    xml2js = require('xml2js'),\n    ConfigXmlHelper = require('./configXmlHelper.js'),\n    DEFAULT_SCHEME = 'http';\n\n  module.exports = {\n    readPreferences: readPreferences\n  };\n\n  // region Public API\n\n  /**\n   * Read plugin preferences from the config.xml file.\n   *\n   * @param {Object} cordovaContext - cordova context object\n   * @return {Array} list of host objects\n   */\n  function readPreferences(cordovaContext) {\n    // read data from projects root config.xml file\n    var configXml = new ConfigXmlHelper(cordovaContext).read();\n    if (configXml == null) {\n      console.warn('config.xml not found! Please, check that it exist\\'s in your project\\'s root directory.');\n      return null;\n    }\n\n    // look for data from the <branch-config> tag\n    var ulXmlPreferences = configXml.widget['branch-config'];\n    if (ulXmlPreferences == null || ulXmlPreferences.length == 0) {\n      console.warn('<branch-config> tag is not set in the config.xml. Universal Links plugin is not going to work.');\n      return null;\n    }\n\n    var xmlPreferences = ulXmlPreferences[0];\n\n    // read hosts\n    var hosts = constructHostsList(xmlPreferences);\n\n    // read ios team ID\n    var iosTeamId = getTeamIdPreference(xmlPreferences);\n\n    // read Android prefix\n    var androidPrefix = getAndroidPrefixPreference(xmlPreferences);\n\n    return {\n      'hosts': hosts,\n      'iosTeamId': iosTeamId,\n      'androidPrefix': androidPrefix\n    };\n  }\n\n  // endregion\n\n  // region Private API\n\n  function getTeamIdPreference(xmlPreferences) {\n    if (xmlPreferences.hasOwnProperty('ios-team-id')) {\n      return xmlPreferences['ios-team-id'][0]['$']['value'];\n    }\n\n    return null;\n  }\n\n  function getAndroidPrefixPreference(xmlPreferences) {\n    if (xmlPreferences.hasOwnProperty('android-prefix')) {\n      return xmlPreferences['android-prefix'][0]['$']['value'];\n    }\n\n    return null;\n  }\n\n  /**\n   * Construct list of host objects, defined in xml file.\n   *\n   * @param {Object} xmlPreferences - plugin preferences from config.xml as JSON object\n   * @return {Array} array of JSON objects, where each entry defines host data from config.xml.\n   */\n  function constructHostsList(xmlPreferences) {\n    var hostsList = [];\n\n    // look for defined hosts\n    var xmlHostList = xmlPreferences['host'];\n    if (xmlHostList == null || xmlHostList.length == 0) {\n      return [];\n    }\n\n    xmlHostList.forEach(function(xmlElement) {\n      var host = constructHostEntry(xmlElement);\n      if (host) {\n        hostsList.push(host);\n      }\n    });\n\n    return hostsList;\n  }\n\n  /**\n   * Construct host object from xml data.\n   *\n   * @param {Object} xmlElement - xml data to process.\n   * @return {Object} host entry as JSON object\n   */\n  function constructHostEntry(xmlElement) {\n    var host = {\n        scheme: DEFAULT_SCHEME,\n        name: ''\n      },\n      hostProperties = xmlElement['$'];\n\n    if (hostProperties == null || hostProperties.length == 0) {\n      return null;\n    }\n\n    // read host name\n    host.name = hostProperties.name;\n\n    // read scheme if defined\n    if (hostProperties['scheme'] != null) {\n      host.scheme = hostProperties.scheme;\n    }\n\n    return host;\n  }\n\n  // endregion\n\n})();\n"],"sourceRoot":"/source/"}