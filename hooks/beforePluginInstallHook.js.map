{"version":3,"sources":["beforePluginInstallHook.js"],"names":[],"mappings":"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","file":"beforePluginInstallHook.js","sourcesContent":["/**\nHook is executed when plugin is added to the project.\nIt will check all necessary module dependencies and install the missing ones locally.\n*/\n\nvar exec = require('child_process').exec,\n  path = require('path'),\n  fs = require('fs'),\n  INSTALLATION_FLAG_FILE_NAME = '.installed';\n\n// region NPM specific\n\n/**\n * Check if node package is installed.\n *\n * @param {String} moduleName\n * @return {Boolean} true if package already installed\n */\nfunction isNodeModuleInstalled(moduleName) {\n  var installed = true;\n  try {\n    var module = require(moduleName);\n  } catch (err) {\n    installed = false;\n  }\n\n  return installed;\n}\n\n/**\n * Install node module locally.\n * Basically, it runs 'npm install module_name'.\n *\n * @param {String} moduleName\n * @param {Callback(error)} callback\n */\nfunction installNodeModule(moduleName, callback) {\n  if (isNodeModuleInstalled(moduleName)) {\n    printLog('Node module ' + moduleName + ' is found');\n    callback(null);\n    return;\n  }\n  printLog('Can\\'t find module ' + moduleName + ', running npm install');\n\n  var cmd = 'npm install -D ' + moduleName;\n  exec(cmd, function(err, stdout, stderr) {\n    callback(err);\n  });\n}\n\n/**\n * Install all required node packages.\n */\nfunction installRequiredNodeModules(modulesToInstall) {\n  if (!modulesToInstall.length) {\n    return;\n  }\n\n  var moduleName = modulesToInstall.shift();\n  installNodeModule(moduleName, function(err) {\n    if (err) {\n      printLog('Failed to install module ' + moduleName + ':' + err);\n      return;\n    }\n\n    printLog('Module ' + moduleName + ' is installed');\n    installRequiredNodeModules(modulesToInstall);\n  });\n}\n\n// endregion\n\n// region Logging\n\nfunction logStart() {\n  console.log('Checking dependencies:');\n}\n\nfunction printLog(msg) {\n  var formattedMsg = '    ' + msg;\n  console.log(formattedMsg);\n}\n\n// endregion\n\n// region Private API\n\n/**\n * Check if we already executed this hook.\n *\n * @param {Object} ctx - cordova context\n * @return {Boolean} true if already executed; otherwise - false\n */\nfunction isInstallationAlreadyPerformed(ctx) {\n  var pathToInstallFlag = path.join(ctx.opts.projectRoot, 'plugins', ctx.opts.plugin.id, INSTALLATION_FLAG_FILE_NAME),\n    isInstalled = false;\n  try {\n    var content = fs.readFileSync(pathToInstallFlag);\n    isInstalled = true;\n  } catch (err) {\n  }\n\n  return isInstalled;\n}\n\n/**\n * Create empty file - indicator, that we tried to install dependency modules after installation.\n * We have to do that, or this hook is gonna be called on any plugin installation.\n */\nfunction createPluginInstalledFlag(ctx) {\n  var pathToInstallFlag = path.join(ctx.opts.projectRoot, 'plugins', ctx.opts.plugin.id, INSTALLATION_FLAG_FILE_NAME);\n\n  fs.closeSync(fs.openSync(pathToInstallFlag, 'w'));\n}\n\n// endregion\n\n/**\n * Read dependencies from the package.json.\n * We will install them on the next step.\n *\n * @param {Object} ctx - cordova context\n * @return {Array} list of modules to install\n */\nfunction readDependenciesFromPackageJson(ctx) {\n  var data = require(path.join(ctx.opts.projectRoot, 'plugins', ctx.opts.plugin.id, 'package.json')),\n    dependencies = data['dependencies'],\n    modules = [];\n\n  if (!dependencies) {\n    return modules;\n  }\n\n  for (var module in dependencies) {\n    modules.push(module);\n  }\n\n  return modules;\n}\n\n// hook's entry point\nmodule.exports = function(ctx) {\n  // exit if we already executed this hook once\n  if (isInstallationAlreadyPerformed(ctx)) {\n    return;\n  }\n\n  logStart();\n\n  var modules = readDependenciesFromPackageJson(ctx);\n  installRequiredNodeModules(modules);\n\n  createPluginInstalledFlag(ctx);\n};\n"],"sourceRoot":"/source/"}