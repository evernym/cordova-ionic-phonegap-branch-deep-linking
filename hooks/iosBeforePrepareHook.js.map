{"version":3,"sources":["iosBeforePrepareHook.js"],"names":[],"mappings":";;AAAA;;;;;;AAMA,IAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,IACE,KAAK,QAAQ,IAAR,CADP;AAAA,IAEE,kBAAkB,QAAQ,0BAAR,CAFpB;;AAIA,OAAO,OAAP,GAAiB,UAAS,GAAT,EAAc;AAC7B,MAAI,GAAJ;AACD,CAFD;;AAIA;;;;;AAKA,SAAS,GAAT,CAAa,GAAb,EAAkB;AAChB,MAAI,cAAc,IAAI,IAAJ,CAAS,WAA3B;AAAA,MACE,qBAAqB,KAAK,IAAL,CAAU,WAAV,EAAuB,WAAvB,EAAoC,KAApC,CADvB;AAAA,MAEE,kBAAkB,IAAI,eAAJ,CAAoB,GAApB,CAFpB;AAAA,MAGE,iBAAiB,kBAAkB,kBAAlB,CAHnB;AAAA,MAIE,iBAAiB,gBAAgB,cAAhB,EAJnB;;AAMA;AACA,MAAI,eAAe,MAAf,GAAwB,CAAxB,IAA6B,mBAAmB,cAApD,EAAoE;AAClE;AACD;;AAED,UAAQ,GAAR,CAAY,wDAAZ;;AAEA;AACA,MAAI,0BAA0B,KAAK,IAAL,CAAU,kBAAV,EAA8B,cAA9B,EAA8C,WAA9C,EAA2D,iBAAiB,eAA5E,CAA9B;AAAA,MACE,0BAA0B,KAAK,IAAL,CAAU,kBAAV,EAA8B,cAA9B,EAA8C,WAA9C,EAA2D,iBAAiB,eAA5E,CAD5B;;AAGA,MAAI;AACF,OAAG,UAAH,CAAc,uBAAd,EAAuC,uBAAvC;AACD,GAFD,CAEE,OAAO,GAAP,EAAY;AACZ,YAAQ,IAAR,CAAa,sCAAb;AACA,YAAQ,IAAR,CAAa,GAAb;AACD;AACF;;AAED;;AAEA;;;;;;;AAOA,SAAS,iBAAT,CAA2B,UAA3B,EAAuC;AACrC,MAAI,QAAQ,EAAZ;AAAA,MACE,cAAc,EADhB;;AAGA,MAAI;AACF,YAAQ,GAAG,WAAH,CAAe,UAAf,CAAR;AACD,GAFD,CAEE,OAAO,GAAP,EAAY;AACZ,WAAO,EAAP;AACD;;AAED;AACA,QAAM,IAAN,CAAW,UAAS,QAAT,EAAmB;AAC5B,QAAI,KAAK,OAAL,CAAa,QAAb,MAA2B,YAA/B,EAA6C;AAC3C,oBAAc,KAAK,QAAL,CAAc,QAAd,EAAwB,YAAxB,CAAd;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAPD;;AASA,SAAO,WAAP;AACD;;AAED","file":"iosBeforePrepareHook.js","sourcesContent":["/*\nHook executed before the 'prepare' stage. Only for iOS project.\nIt will check if project name has changed. If so - it will change the name of the .entitlements file to remove that file duplicates.\nIf file name has no changed - hook would not do anything.\n*/\n\nvar path = require('path'),\n  fs = require('fs'),\n  ConfigXmlHelper = require('./lib/configXmlHelper.js');\n\nmodule.exports = function(ctx) {\n  run(ctx);\n};\n\n/**\n * Run the hook logic.\n *\n * @param {Object} ctx - cordova context object\n */\nfunction run(ctx) {\n  var projectRoot = ctx.opts.projectRoot,\n    iosProjectFilePath = path.join(projectRoot, 'platforms', 'ios'),\n    configXmlHelper = new ConfigXmlHelper(ctx),\n    oldProjectName = getOldProjectName(iosProjectFilePath),\n    newProjectName = configXmlHelper.getProjectName();\n\n  // if name has not changed - do nothing\n  if (oldProjectName.length > 0 && oldProjectName === newProjectName) {\n    return;\n  }\n\n  console.log('Project name has changed. Renaming .entitlements file.');\n\n  // if it does - rename it\n  var oldEntitlementsFilePath = path.join(iosProjectFilePath, oldProjectName, 'Resources', oldProjectName + '.entitlements'),\n    newEntitlementsFilePath = path.join(iosProjectFilePath, oldProjectName, 'Resources', newProjectName + '.entitlements');\n\n  try {\n    fs.renameSync(oldEntitlementsFilePath, newEntitlementsFilePath);\n  } catch (err) {\n    console.warn('Failed to rename .entitlements file.');\n    console.warn(err);\n  }\n}\n\n// region Private API\n\n/**\n * Get old name of the project.\n * Name is detected by the name of the .xcodeproj file.\n *\n * @param {String} projectDir absolute path to ios project directory\n * @return {String} old project name\n */\nfunction getOldProjectName(projectDir) {\n  var files = [],\n    projectName = '';\n\n  try {\n    files = fs.readdirSync(projectDir);\n  } catch (err) {\n    return '';\n  }\n\n  // find file with .xcodeproj extension, use it as an old project name\n  files.some(function(fileName) {\n    if (path.extname(fileName) === '.xcodeproj') {\n      projectName = path.basename(fileName, '.xcodeproj');\n      return true;\n    }\n\n    return false;\n  });\n\n  return projectName;\n}\n\n// endregion\n"],"sourceRoot":"/source/"}